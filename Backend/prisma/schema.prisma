// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email    String     @unique
  id       Int        @id @default(autoincrement())
  pwHash   String
  comments Comment[]
  pins     Pin[]
  Viewable Viewable[]
  Vote     PinVote[]

  CommentVote CommentVote[]
}

model Viewable {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  pin    Pin  @relation(fields: [pinId], references: [id])
  pinId  Int

  @@id([userId, pinId])
}

model PinVote {
  value  Int
  user   User @relation(fields: [userId], references: [id])
  userId Int
  pin    Pin  @relation(fields: [pinId], references: [id])
  pinId  Int

  @@id([userId, pinId])
}

model CommentVote {
  value     Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int

  @@id([userId, commentId])
}

model Pin {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userID], references: [id])
  userID    Int
  text      String     @db.VarChar(300)
  imageURL  String?
  longitude Float
  latitude  Float
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  comments  Comment[]
  Viewable  Viewable[]
  Vote      PinVote[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  userID    Int
  user      User     @relation(fields: [userID], references: [id])
  pinID     Int
  pin       Pin      @relation(fields: [pinID], references: [id])
  text      String   @db.VarChar(300)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  CommentVote CommentVote[]
}
